{"version":3,"sources":["common/Enum_State.js","components/Towers.js","components/CloudRain.js","components/Button.js","common/TowDimConverting.js","components/Hint.js","components/Board.js","components/AboutPage.js","components/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["STATE","START","BEFORE_RAIN","RAINY","RESET","Towers","currentState","this","props","towDimTowers","towersResult","towersRow","length","i","j","value","blockClass","concat","CURENT","push","react_default","a","createElement","className","drawTowers","React","Component","Cloud","state","cloud_class","drops_counter","ButtonFrame","button","onClick","disabled","isValidInput","makeItRain","reset","isValid","TowDimConverting","startArr","weight","height","reduce","b","Math","max","dropSum","tower_model","level","hasBlock","row","checkForLeftWall","checkForRightWall","index","slice","includes","Hint","hint_class","Board","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","input","oneDimTowers","counter_result","handleInputChange","_","bind","assertThisInitialized","drawTowersClickHandler","makeItRainHandler","resetHandler","test","setState","assign","event","refs","inputValidation","split","result","convert","id","components_Hint","CloudRain","defaultValue","ref","type","onChange","Button","components_Towers","AboutPage","href","Header","_React$Component","apply","arguments","inherits","createClass","key","react_router_dom","basename","to","react_router","path","exact","component","App","Navigation_Header","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"uUAKaA,eAAQ,CACjBC,MAAO,EACPC,YAAa,EACbC,MAAO,EACPC,MAAO,ICuCIC,uLAvCP,IAAIC,EAAeC,KAAKC,MAAMF,aAC1BG,EAAeF,KAAKC,MAAMC,aAC1BC,EAAe,GACfC,EAAY,GAKhB,GAAKF,GAAiBA,EAAaG,OAAnC,CAGA,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAaG,OAAQC,IAAK,CAC1CF,EAAY,GACZ,IAAK,IAAIG,EAAI,EAAGA,EAAIL,EAAaI,GAAGD,OAAQE,IAAK,CAC7C,IAAIC,EAAQN,EAAaI,GAAGC,GACxBE,OAAU,EAEVA,EADJD,EACc,SAAAE,OAAYX,IAAiBY,EAAaf,OAAmB,MAAVY,EAAgB,cAA2B,MAAVA,EAAgB,SAAW,IAC/G,oBAEdJ,EAAUQ,KAAKC,EAAAC,EAAAC,cAAA,OAAKC,UAAWP,KAGnCN,EAAaS,KAAKC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcZ,IAEnD,OAAOD,oCAIP,IAAIA,EAAeH,KAAKiB,aACxB,OACIJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACVb,UAnCIe,IAAMC,WCkCZC,mLAnCP,IAAIC,EAAQrB,KAAKC,MAAMF,aACnBuB,EAAW,mBAAAZ,OAAsBW,IAAUV,EAAaf,MAAQ,SAAW,SAE/E,OACIiB,EAAAC,EAAAC,cAAA,OAAKC,UAAWM,GACZT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACVhB,KAAKC,MAAMsB,eAEhBV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAEfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,YAEJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBA7BfE,IAAMC,WC6CXK,mLA3CP,IAAIC,EAEJ,OADmBzB,KAAKC,MAAMF,cAE1B,KAAKY,EAAajB,MACd+B,EACIZ,EAAAC,EAAAC,cAAA,UAAQC,UAAU,oBAAoBU,QAAS1B,KAAKC,MAAMgB,WAClDU,UAAW3B,KAAKC,MAAM2B,cAD9B,MAKJ,MACJ,KAAKjB,EAAahB,YACd8B,EACIZ,EAAAC,EAAAC,cAAA,UAAQC,UAAU,mBAAmBU,QAAS1B,KAAKC,MAAM4B,WACjDF,UAAW3B,KAAKC,MAAM2B,cAD9B,gBAKJ,MACJ,KAAKjB,EAAaf,MACd6B,EACIZ,EAAAC,EAAAC,cAAA,UAAQC,UAAU,mBAAmBU,QAAS1B,KAAKC,MAAM6B,MACjDH,UAAW3B,KAAKC,MAAM2B,cAD9B,YAKJ,MAEJ,QACIH,EACIZ,EAAAC,EAAAC,cAAA,UAAQC,UAAU,mBAAmBU,QAAS1B,KAAKC,MAAM6B,MACjDH,SAAU3B,KAAKC,MAAM8B,SAD7B,UAOZ,OACIN,SAxCcP,IAAMC,mBCMXa,kGACTC,GASJ,IARA,IAAIC,EAASD,EAAS5B,OAClB8B,EAASF,EAASG,OAAO,SAAUtB,EAAGuB,GAClC,OAAOC,KAAKC,IAAIzB,EAAGuB,KAEvBG,EAAU,EAEVC,EAAc,GAETnC,EAAI,EAAGA,EAAI6B,EAAQ7B,IAAK,CAE7B,IADA,IAAIoC,EAAQ,GACHnC,EAAI,EAAGA,EAAI2B,EAAQ3B,IAAK,CAC7B,IAAIoC,EAAYR,EAAU7B,EAAM2B,EAAS1B,GAAK,EAAI,EAClDmC,EAAM9B,KAAK+B,GAEfF,EAAY7B,KAAK8B,GAMrB,IAAK,IAAIpC,EAAI,EAAGA,EAAI6B,EAAQ7B,IACxB,IAAK,IAAIC,EAAI,EAAGA,EAAI2B,EAAS,EAAG3B,IAAK,CACjC,IAAIqC,EAAMH,EAAYnC,IACjBsC,EAAIrC,IAAMsC,EAAiBD,EAAKrC,IAAMuC,EAAkBF,EAAKrC,KAC9DqC,EAAIrC,GAAK,IACTiC,KAKZ,SAASK,EAAiBD,EAAKG,GAC3B,OAAOH,EAAII,MAAM,EAAGD,GAAOE,SAAS,GAGxC,SAASH,EAAkBF,EAAKG,GAC5B,OAAOH,EAAII,MAAMD,EAAQ,EAAGH,EAAIvC,QAAQ4C,SAAS,GAGrD,MAAO,CAACR,cAAaD,oBChCdU,mLAZP,IAAI7B,EAAQrB,KAAKC,MAAMF,aACnBoD,EAAU,IAAAzC,OAAOW,IAAUV,EAAajB,MAAQ,SAAW,QAE/D,OACImB,EAAAC,EAAAC,cAAA,OAAKC,UAAWmC,GACZtC,EAAAC,EAAAC,cAAA,wEAPOG,IAAMC,WCqGdiC,cAzFX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAtD,KAAAoD,IACVC,EAAAC,OAAAE,EAAA,EAAAF,CAAAtD,KAAAsD,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA1D,QACKqB,MAAQ,CACTsC,MAAO,QACPC,aAAc,CAAC,EAAG,EAAG,GACrB1D,aAAc,GACd6B,SAAS,EACT8B,eAAgB,EAChB9D,aAAcY,EAAajB,OAG/B2D,EAAKS,kBAAoBC,WAAWV,EAAKS,kBAAkBE,KAAvBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KAAmC,KACvEA,EAAKa,uBAAyBb,EAAKa,uBAAuBF,KAA5BV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KAC9BA,EAAKc,kBAAoBd,EAAKc,kBAAkBH,KAAvBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KACzBA,EAAKe,aAAef,EAAKe,aAAaJ,KAAlBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KAdVA,+EAsBE7C,GACZ,IACIoB,EADe,0BACayC,KAAK7D,GAErC,OADAR,KAAKsE,SAAShB,OAAOiB,OAAO,GAAIvE,KAAKqB,MAAO,CAACU,QAASH,KAC/CA,4CAGO4C,GACd,IAAIhE,EAAQR,KAAKyE,KAAKd,MAAMnD,MACTR,KAAK0E,gBAAgBlE,IAEpCR,KAAKsE,SAAShB,OAAOiB,OAAO,GAAIvE,KAAKqB,MAAO,CAACuC,aAAcpD,EAAMmE,MAAM,yDAQ3E,IACIC,GADY,IAAI5C,GACG6C,QAAQ7E,KAAKqB,MAAMuC,cAC1C5D,KAAKsE,SAAShB,OAAOiB,OAAO,GAAIvE,KAAKqB,MAAO,CACxCnB,aAAc0E,EAAOnC,YACrBoB,eAAgBe,EAAOpC,QACvBzC,aAAcY,EAAahB,2DAK/BK,KAAKsE,SAAShB,OAAOiB,OAAO,GAAIvE,KAAKqB,MAAO,CAACtB,aAAcY,EAAaf,gDAIxEI,KAAKsE,SAAShB,OAAOiB,OAAO,GAAIvE,KAAKqB,MAAO,CACxCnB,aAAc,GACdyD,MAAO,GACPE,eAAgB,EAChB9D,aAAcY,EAAajB,0CAK/B,OACImB,EAAAC,EAAAC,cAAA,OAAK+D,GAAG,kBACRjE,EAAAC,EAAAC,cAACgE,EAAD,CAAMhF,aAAcC,KAAKqB,MAAMtB,eAC3Bc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAACiE,EAAD,CAAOzD,cAAevB,KAAKqB,MAAMwC,eAAgB9D,aAAcC,KAAKqB,MAAMtB,eAC1Ec,EAAAC,EAAAC,cAAA,SAAOY,SAAU3B,KAAKqB,MAAMtB,aAAckF,aAAcjF,KAAKqB,MAAMsC,MAAOuB,IAAI,QACvElE,UAAWhB,KAAKqB,MAAMU,QAAU,uBAAyB,6BAA+BoD,KAAK,OAC7FC,SAAUpF,KAAK8D,oBACtBjD,EAAAC,EAAAC,cAACsE,EAAD,CACIzD,aAAc5B,KAAKqB,MAAMU,QACzBhC,aAAcC,KAAKqB,MAAMtB,aACzBkB,WAAYjB,KAAKkE,uBACjBrC,WAAY7B,KAAKmE,kBACjBrC,MAAO9B,KAAKoE,gBAGpBvD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mCACXH,EAAAC,EAAAC,cAACuE,EAAD,CAAQvF,aAAcC,KAAKqB,MAAMtB,aAAcG,aAAcF,KAAKqB,MAAMnB,wBAlFxEgB,IAAMC,WCiBXoE,EA1BG,kBACd1E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,gBACAH,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAAA,qEACAF,EAAAC,EAAAC,cAAA,sIAGJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,eACAH,EAAAC,EAAAC,cAAA,qGACAF,EAAAC,EAAAC,cAAA,yLAGJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eAAd,aACAH,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,KAAGyE,KAAK,sCAAR,oBACH3E,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,KAAGyE,KAAK,0FAAR,0CCnBNC,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAAnC,OAAAC,EAAA,EAAAD,CAAAtD,KAAAyF,GAAAnC,OAAAE,EAAA,EAAAF,CAAAtD,KAAAsD,OAAAG,EAAA,EAAAH,CAAAmC,GAAAE,MAAA3F,KAAA4F,YAAA,OAAAtC,OAAAuC,EAAA,EAAAvC,CAAAmC,EAAAC,GAAApC,OAAAwC,EAAA,EAAAxC,CAAAmC,EAAA,EAAAM,IAAA,SAAAvF,MAAA,WAGQ,OACIK,EAAAC,EAAAC,cAACiF,EAAA,EAAD,CAAYC,SAAS,KACjBpF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8CACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAewE,KAAK,KAAjC,qBACA3E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BAA2B8D,GAAG,aACzCjE,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACVH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aACVH,EAAAC,EAAAC,cAACiF,EAAA,EAAD,CAAMhF,UAAU,WAAWkF,GAAG,KAA9B,SAEJrF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,YACVH,EAAAC,EAAAC,cAACiF,EAAA,EAAD,CAAMhF,UAAU,WAAWkF,GAAG,UAA9B,aAMhBrF,EAAAC,EAAAC,cAACoF,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWlD,IACjCvC,EAAAC,EAAAC,cAACoF,EAAA,EAAD,CAAOC,KAAK,UAAUE,UAAWf,UArBrDE,EAAA,CAA4BvE,IAAMC,WCUnBoF,mLARP,OACI1F,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACyF,EAAD,cAJErF,aCOZsF,EAAcC,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DAsCR,SAASC,EAAgBC,EAAOC,GAC5BC,UAAUC,cACLC,SAASJ,GACTK,KAAK,SAAAC,GACFA,EAAaC,cAAgB,WACzB,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACE,cAA3BF,EAAiBnG,QACb6F,UAAUC,cAAcQ,YAIxBC,QAAQC,IACJ,iHAKAZ,GAAUA,EAAOa,UACjBb,EAAOa,SAASR,KAMpBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACjBd,EAAOc,UAAUT,UAOxCU,MAAM,SAAAC,GACHL,QAAQK,MAAM,4CAA6CA,KCzFvEC,IAASC,OACLtH,EAAAC,EAAAC,cAACiF,EAAA,EAAD,KACInF,EAAAC,EAAAC,cAACqH,EAAD,OAEJC,SAASC,eAAe,SDWrB,SAAkBrB,GACrB,GAA6C,kBAAmBC,UAAW,CAGvE,GADkB,IAAIqB,IAAIC,qBAAwB7B,OAAOC,SAASpB,MACpDiD,SAAW9B,OAAOC,SAAS6B,OAIrC,OAGJ9B,OAAO+B,iBAAiB,OAAQ,WAC5B,IAAM1B,EAAK,GAAAtG,OAAM8H,qBAAN,sBAEP/B,GAgEhB,SAAiCO,EAAOC,GAEpC0B,MAAM3B,GACDK,KAAK,SAAAuB,GAEF,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEjB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAM7B,KAAK,SAAAC,GAC/BA,EAAa6B,aAAa9B,KAAK,WAC3BV,OAAOC,SAASwC,aAKxBrC,EAAgBC,EAAOC,KAG9Be,MAAM,WACHJ,QAAQC,IACJ,mEArFAwB,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,KAAK,WAC/BO,QAAQC,IACJ,gHAMRd,EAAgBC,EAAOC,MClCvCE","file":"static/js/main.2117e91c.chunk.js","sourcesContent":["/**\n * Holding the state of the application\n * @type {{START: number, BEFORE_RAIN: number, RAINY: number, RESET: number}}\n */\n\nexport const STATE = {\n    START: 0,\n    BEFORE_RAIN: 1,\n    RAINY: 2,\n    RESET: 3\n};","import React from 'react';\nimport * as CURENT from '../common/Enum_State'\n\n/**\n * this class should handle with the towers/block presentation\n */\nclass Towers extends React.Component {\n\n    drawTowers() {\n        let currentState = this.props.currentState,\n            towDimTowers = this.props.towDimTowers,\n            towersResult = [],\n            towersRow = [];\n\n        /**\n         *break in case the in no valid 2dim array to wotk with\n         */\n        if (!towDimTowers && !towDimTowers.length)\n            return;\n\n        for (let i = 0; i < towDimTowers.length; i++) {\n            towersRow = [];\n            for (let j = 0; j < towDimTowers[i].length; j++) {\n                let value = towDimTowers[i][j],\n                    blockClass;\n                value ?\n                    blockClass = `block ${currentState === CURENT.STATE.RAINY && value === 'x' ? 'water_block' : (value === 'x' ? 'hidden' : '')}` :\n                    blockClass = `block non_visible`;\n\n                towersRow.push(<div className={blockClass}></div>)\n\n            }\n            towersResult.push(<div className=\"blocks_row\">{towersRow}</div>)\n        }\n        return towersResult;\n    }\n\n    render() {\n        let towersResult = this.drawTowers();\n        return (\n            <div className=\"towers_container\">\n                {towersResult}\n            </div>\n        );\n    }\n\n}\n\nexport default Towers;\n\n","import React from 'react';\nimport * as CURENT from '../common/Enum_State'\n\nclass Cloud extends React.Component {\n    render() {\n        let state = this.props.currentState,\n            cloud_class = `cloud_container ${state !== CURENT.STATE.RAINY ? 'hidden' : 'rainy'}`;\n\n        return (\n            <div className={cloud_class}>\n                <div className=\"result_count\">\n                    {this.props.drops_counter}\n                </div>\n                <div className='cloud1'/>\n                <div className='cloud2'/>\n                <div className='cloud3'/>\n\n                <div className='rain'>\n                    <li/>\n                    <li/>\n                    <li/>\n                    <li/>\n                    <li/>\n                    <li/>\n                    <li/>\n                    <li/>\n                    <li/>\n                    <li/>\n                </div>\n                <div className='thunder-container'>\n                    <div className='thunder1'></div>\n                    <div className='thunder2'></div>\n                    <div className='thunder3'></div>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default Cloud;\n","import React from 'react';\nimport * as CURENT from '../common/Enum_State'\n\nclass ButtonFrame extends React.Component {\n    render() {\n        let button,\n            currentState = this.props.currentState;\n        switch (currentState) {\n            case CURENT.STATE.START:\n                button = (\n                    <button className=\"btn   btn-success\" onClick={this.props.drawTowers}\n                            disabled={!this.props.isValidInput}>\n                        Go\n                    </button>\n                );\n                break;\n            case CURENT.STATE.BEFORE_RAIN:\n                button = (\n                    <button className=\"btn  btn-primary\" onClick={this.props.makeItRain}\n                            disabled={!this.props.isValidInput}>\n                        Make it Rain\n                    </button>\n                );\n                break;\n            case CURENT.STATE.RAINY:\n                button = (\n                    <button className=\"btn  btn-warning\" onClick={this.props.reset}\n                            disabled={!this.props.isValidInput}>\n                        Re-Start\n                    </button>\n                );\n                break;\n\n            default:\n                button = (\n                    <button className=\"btn btn-primary \" onClick={this.props.reset}\n                            disabled={this.props.isValid}>\n                        Render\n                    </button>\n                );\n        }\n\n        return (\n            button\n        );\n    }\n}\n\nexport default ButtonFrame;","/**\n * convert 1Dim Array to Towers 2Dim array\n * x: present water drop\n * 1: block in the building\n * 0: no block in the building\n * @param startArr\n * @returns {{tower_model: Array, dropSum: number}}\n */\n\nexport default class TowDimConverting {\n    convert(startArr) {\n        let weight = startArr.length,\n            height = startArr.reduce(function (a, b) {\n                return Math.max(a, b);\n            }),\n            dropSum = 0;\n\n        let tower_model = [];\n\n        for (let i = 0; i < height; i++) {\n            let level = [];\n            for (let j = 0; j < weight; j++) {\n                let hasBlock = (height - (i)) > startArr[j] ? 0 : 1;\n                level.push(hasBlock)\n            }\n            tower_model.push(level)\n        }\n\n        /**\n         * calculating the number of water drops between the building\n         */\n        for (let i = 0; i < height; i++) {\n            for (let j = 1; j < weight - 1; j++) {\n                let row = tower_model[i];\n                if (!row[j] && checkForLeftWall(row, j) && checkForRightWall(row, j)) {\n                    row[j] = 'x';\n                    dropSum++\n                }\n            }\n        }\n\n        function checkForLeftWall(row, index) {\n            return row.slice(0, index).includes(1);\n        }\n\n        function checkForRightWall(row, index) {\n            return row.slice(index + 1, row.length).includes(1);\n        }\n\n        return {tower_model, dropSum};\n    }\n}","import React from 'react';\nimport * as CURENT from '../common/Enum_State'\n\n    class Hint extends React.Component {\n    render() {\n        let state = this.props.currentState,\n            hint_class = ` ${state !== CURENT.STATE.START ? 'hidden' : 'hint'}`;\n\n        return (\n            <div className={hint_class}>\n                <p>please insert an array of building separated by '-'</p>\n            </div>\n        );\n    }\n}\n\n\nexport default Hint;\n","/**\n * Board is the main component\n */\nimport './../style/rain.css';\nimport './../style/style.css';\nimport React from 'react';\nimport Towers from './Towers'\nimport Cloud from './CloudRain'\nimport Button from './Button'\nimport * as _ from 'lodash'\nimport TowDimConverting from '../common/TowDimConverting'\nimport * as CURENT from '../common/Enum_State'\nimport Hint from \"./Hint\";\n\nclass Board extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            input: '3-0-3', //default input\n            oneDimTowers: [3, 0, 3],\n            towDimTowers: [],\n            isValid: true, //check for input is valid\n            counter_result: 0,\n            currentState: CURENT.STATE.START\n        };\n\n        this.handleInputChange = _.debounce(this.handleInputChange.bind(this), 300);\n        this.drawTowersClickHandler = this.drawTowersClickHandler.bind(this);\n        this.makeItRainHandler = this.makeItRainHandler.bind(this);\n        this.resetHandler = this.resetHandler.bind(this);\n    }\n\n    /**\n     * check if the input is follow the pattern digit-digit-digit..\n     * @param value\n     * @returns {boolean}\n     */\n    inputValidation(value) {\n        let inputPattern = /^[1-9]([-]{1}\\d){1,22}$/,\n            isValidInput = inputPattern.test(value);\n        this.setState(Object.assign({}, this.state, {isValid: isValidInput}));\n        return isValidInput;\n    }\n\n    handleInputChange(event) {\n        let value = this.refs.input.value,\n            isValidInput = this.inputValidation(value);\n        if (isValidInput) {\n            this.setState(Object.assign({}, this.state, {oneDimTowers: value.split('-')}));\n        }\n    }\n\n    /**\n     * set the 2Dim Tower array presentation.\n     */\n    drawTowersClickHandler() {\n        let converter = new TowDimConverting(),\n            result = converter.convert(this.state.oneDimTowers);\n        this.setState(Object.assign({}, this.state, {\n            towDimTowers: result.tower_model,\n            counter_result: result.dropSum,\n            currentState: CURENT.STATE.BEFORE_RAIN\n        }));\n    }\n\n    makeItRainHandler() {\n        this.setState(Object.assign({}, this.state, {currentState: CURENT.STATE.RAINY}));\n    }\n\n    resetHandler() {\n        this.setState(Object.assign({}, this.state, {\n            towDimTowers: [],\n            input: '',\n            counter_result: 0,\n            currentState: CURENT.STATE.START\n        }));\n    }\n\n    render() {\n        return (\n            <div id=\"main_container\">\n            <Hint currentState={this.state.currentState}/>\n                <div className=\"flexcontainer\">\n                    <Cloud drops_counter={this.state.counter_result} currentState={this.state.currentState}/>\n                    <input disabled={this.state.currentState} defaultValue={this.state.input} ref='input'\n                           className={this.state.isValid ? 'bigitem form-control' : 'bigitem form-control error'}  type=\"text\"\n                           onChange={this.handleInputChange}/>\n                    <Button\n                        isValidInput={this.state.isValid}\n                        currentState={this.state.currentState}\n                        drawTowers={this.drawTowersClickHandler}\n                        makeItRain={this.makeItRainHandler}\n                        reset={this.resetHandler}\n                    />\n                </div>\n                <div className=\"colored_container flexcontainer\">\n                    <Towers currentState={this.state.currentState} towDimTowers={this.state.towDimTowers}/>\n                </div>\n            </div>\n\n        );\n    }\n}\n\nexport default Board;","/**\n * Static Page for About Page\n */\nimport React from 'react';\n\nconst AboutPage = () => (\n    <div className=\"container aboutPage\">\n        <div className=\"row\">\n            <div className=\"col-lg-12\">\n                <h1 className=\"page-header\">Introduction</h1>\n                <p>* built with react cli </p>\n                <p>* Solution and Simulation for twitter waterflow problem </p>\n                <p>* you can find a efficient solution \"src/solution/solution.js\", but it didn’t fit the visualization.\n                    You can find .</p>\n            </div>\n            <div className=\"col-12 content\">\n                <h1 className=\"page-header\">Assumptions</h1>\n                <p>* The height of each building cannot be more than 9 floors (just for the visualization).</p>\n                <p>• The input must be ‘digit-digit-digit……..’. first digit cannot be ‘0’(because there is no meaning to\n                    this height in the visualization).</p>\n            </div>\n            <div className=\"col-12 content\">\n                <h1 className=\"page-header\">Resources</h1>\n                <p><a href=\"http://codepen.io/Toni47/pen/dbrIG\">Rain simulation</a></p>\n                <p><a href=\"https://app.pluralsight.com/library/courses/react-js-getting-started/table-of-contents\">Pluralsight\n                    React Getting Started</a></p>\n            </div>\n        </div>\n\n    </div>\n);\nexport default AboutPage;\n","import React from 'react';\nimport { HashRouter, Link, Route} from 'react-router-dom';\nimport Board from \"./Board\";\nimport AboutPage from \"./AboutPage\";\n\nexport class Header extends React.Component {\n\n    render() {\n        return (\n            <HashRouter basename='/'>\n                <div>\n                    <nav className=\"navbar navbar-toggleable-md navbar-inverse\">\n                        <a className=\"navbar-brand\" href=\"/\">waterflow-problem</a>\n                        <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\n                            <ul className=\"navbar-nav\">\n                                <li className=\"nav-item \">\n                                    <Link className=\"nav-link\" to=\"/\">Home</Link>\n                                </li>\n                                <li className=\"nav-item\">\n                                    <Link className=\"nav-link\" to=\"/about\">About</Link>\n                                </li>\n                            </ul>\n                        </div>\n                    </nav>\n\n                    <Route path=\"/\" exact component={Board}/>\n                    <Route path=\"/about/\" component={AboutPage}/>\n                </div>\n            </HashRouter>\n        )\n    }\n}","import React, {Component} from 'react';\nimport './App.css';\n\nimport {Header} from \"./components/Navigation\";\n\nclass App extends Component {\n    render() {\n        return (\n            <div>\n                <Header/>\n            </div>\n        );\n    }\n}\n\nexport default App;\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App/>\n    </BrowserRouter>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}